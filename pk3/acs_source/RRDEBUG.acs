#library "RRDEBUG"
#include "zcommon.acs"

#include "8BDMMATH.acs"
#include "CROCFUNC.acs"

#include "debuglib.acs"

#define MAXSETTINGS_DEBUG 101

str debugSettings[MAXSETTINGS_DEBUG] = {
    // "sv_infiniteinventory true",
""};

script "rtx_debug_open" OPEN
{
    debugLog("rtx_debug_open", "\cg====================================================");
    debugLog("rtx_debug_open", "\cgREPTILE REARMED IS RUNNING IN DEBUG MODE");
    debugLog("rtx_debug_open", "\cg====================================================");

    bool canc = false;
    if(isDebug()) {
        for(int i = 0; i < MAXSETTINGS_DEBUG && !canc; i++) {
            str command = debugSettings[i];
            if(strLen(command) > 0 && command != 0) {
                ConsoleCommand(command);
            } else {
                canc = true;
            }
        }
    }

    while(true) {
        globalTick++;
        delay(1);
    }
}

#define MAXWEAPS_DEBUG 100

str giveWeapons[MAXWEAPS_DEBUG] = {
    "MemoryBombWep",
    "CrunchranItem",
    "MagnetBeamItem",
""};

script "rtx_debug_enter" ENTER
{
    if(!isTitlemap() && isDebug())
    {
        delay(1);
        if(PlayerIsBot(PlayerNumber()))
        {
            ACS_NamedExecuteAlways("rtx_debug_bot", 0);
        }
        else
        {
            ACS_NamedExecuteAlways("rtx_debug_player", 0);
        }
    }
}

script "rtx_debug_respawn" RESPAWN
{
    ACS_NamedExecuteAlways("rtx_debug_enter", 0);
}

script "rtx_debug_player" (void)
{
    while(true)
    {
        bool canc = false;
        for(int i = 0; i < MAXWEAPS_DEBUG && !canc; i++) {
            str give = giveWeapons[i];
            if(strLen(give) > 0 && give != 0) {
                if(CheckInventory(give) == 0)
                    giveInventory(give, 1);
            } else {
                canc = true;
            }
        }
        delay(1);
    }
}

script "croc_windstormhittest" (void)
{
    int target = ACS_NamedExecuteWithResult("core_getptrtid", AAPTR_TARGET);
    int tracer = ACS_NamedExecuteWithResult("core_getptrtid", AAPTR_TRACER);

    debugLog("croc_windstormhittest", strf2("Attackee: %d // Attacker: %d", tracer, target));
}

#define DBF_FREEZE       1 << 0 // freeze the bot
#define DBF_SELECTWEAPON 1 << 1 // select a specific weapon
#define DBF_ONLYWEAPON   1 << 2 // select *only* that weapon
#define DBF_FLY          1 << 3 // Hold the bot in the air

str botWeapon = "TornadoHoldWep";

script "rtx_debug_bot" (void)
{
    int botflags = 0|
        // DBF_FREEZE|
        // DBF_SELECTWEAPON|
        // DBF_ONLYWEAPON|
        // DBF_FLY|
    0;

    if(botFlags & DBF_FREEZE) {
	    ACS_NamedExecuteAlways("core_freezeplayer",0, 0, true);
    }

    if(botFlags & DBF_FLY) {
	    ACS_NamedExecuteAlways("core_flyplayer",0, 0, true);
    }

    if(botFlags & DBF_SELECTWEAPON) {
        GiveInventory(botWeapon, 1);
        SetWeapon(botWeapon);
    }

    bool needsLoop = 
        (botflags & DBF_ONLYWEAPON);

    if(needsLoop)
    {
        delay(1);
        str curWeap = GetWeapon();

        while(getActorProperty(0, APROP_Health) > 0)
        {
            if(botFlags & DBF_ONLYWEAPON)
            {
                if(StrICmp(curWeap, GetWeapon()) != 0)
                {
                    if(CheckInventory(curWeap) == 0)
                    {
                        GiveInventory(curWeap, 1);
                    }
                    SetWeapon(curWeap);
                }
            }

            delay(1);
        }
    }
}

script "rtx_printspeed" (void)
{
    if(isDebug()) {
        while(true) {
            int speed = magnitudeThree(getActorVelx(0), getActorVely(0), getActorVelz(0));
            str class = getActorClass(0);
            if(stricmp(class, "none") == 0)
                terminate;
            printBold(s:strf2("Speed of %s: %d", class, speed));
            delay(1);
        }
    }
}

script "rtx_debug_waila" (int showhitbox) NET {
    if(isDebug()) {
        int utid = UniqueTID();
        int tid = ActivatorTID();
        int actorFlags = MF_SPECIAL | MF_SOLID | MF_SHOOTABLE | MF_NOSECTOR | MF_NOBLOCKMAP | MF_AMBUSH | MF_JUSTHIT |
                    MF_JUSTATTACKED | MF_SPAWNCEILING | MF_NOGRAVITY | MF_DROPOFF | MF_PICKUP | MF_NOCLIP | MF_INCHASE |
                    MF_FLOAT | MF_TELEPORT | MF_MISSILE | MF_DROPPED | MF_SHADOW | MF_NOBLOOD | MF_CORPSE | MF_INFLOAT |
                    MF_INBOUNCE | MF_COUNTKILL | MF_COUNTITEM | MF_SKULLFLY | MF_NOTDMATCH | MF_SPAWNSOUNDSOURCE |
                    MF_FRIENDLY | MF_UNMORPHED | MF_NOLIFTDROP | MF_STEALTH | MF_ICECORPSE;
        
        int otid = PickActor(tid, GetActorAngle(tid), GetActorPitch(tid), 5000.0, utid, actorFlags, ML_BLOCKEVERYTHING, PICKAF_RETURNTID);
        int ret = PickActor(tid, GetActorAngle(tid), GetActorPitch(tid), 5000.0, utid, actorFlags, ML_BLOCKEVERYTHING, PICKAF_RETURNTID|PICKAF_FORCETID);

        if(ret != 0) {
            SetActivator(ret);
            Thing_ChangeTID(0, otid);

            Log(s:"Class: ", s:GetActorClass(0), s:" // TID: ", i:ActivatorTID(), s:" // Pos: ", f:GetActorX(0), s:",", f:GetActorY(0), s:",", f:GetActorZ(0));
            if(showhitbox)
                ACS_NamedExecuteAlways("croc_showactorhitbox", 0);

        } else {
            Log(s:"Nothing found");
        }
    }
}

#define HITBOXVIEW_TIDSTART 10000

script "croc_showactorhitbox" (void) {
    if(isDebug()) {
        if(CheckInventory("ShowingDebugHitbox"))
            terminate;

        GiveInventory("ShowingDebugHitbox", 1);

        int height = FixedDiv(GetActorProperty(0, APROP_Height), 100.0);
        int radius = FixedDiv(GetActorProperty(0, APROP_Radius) * 2, 100.0);
        int utid = UniqueTID(HITBOXVIEW_TIDSTART);

        SpawnSpotForced("DebugHitboxWarper", 0, utid, 0);
        SetActorProperty(utid, APROP_ScaleX, radius);
        SetActorProperty(utid, APROP_ScaleY, height);

        int atid = ActivatorTID();
        int otid = atid;

        if(atid == 0 || ThingCount(T_NONE, atid) > 1) {
            atid = UniqueTID(HITBOXVIEW_TIDSTART);
            Thing_ChangeTID(0, atid);
        }

        SetActivator(utid);
        SetPointer(AAPTR_TARGET, atid);

        SetActivator(atid);

        if(atid != otid) {
            Thing_ChangeTID(atid, otid);
        }

        while(CheckInventory("ShowingDebugHitbox")>0) {
            Delay(1);
        }
        
        // Remove
        Thing_Remove(utid);
    }
}

script "croc_hitboxwarper" (void) CLIENTSIDE
{
    int atid = ActivatorTID();
    SetActivator(0, AAPTR_TARGET);

    // Debuglog("croc_hitboxwarper", strf4("TID: %d // Pos: %f,%f,%f", ActivatorTID(), GetActorX(0), GetActorY(0), GetActorZ(0)));
	
	// Loop if shield is active
	while(CheckInventory("ShowingDebugHitbox") > 0){
		Delay(1);
	}
	
	// Remove
	Thing_Remove(atid);
}

script "croc_explodehitbox" (int radius)
{
    if(isDebug()) {
        int scale = FixedDiv((radius << 16) * 2, 100.0);
        int utid = UniqueTID(HITBOXVIEW_TIDSTART);

        SpawnSpotForced("DebugExplosionHitboxWarper", 0, utid, 0);
        SetActorProperty(utid, APROP_ScaleX, scale);
        SetActorProperty(utid, APROP_ScaleY, scale);
        Thing_ChangeTID(0, utid);
    }
    SetResultValue(radius);
}

str varNames[1000] = {
    "death start",
    "death explode",
    "death final",
};

script "croc_printval" (int val, int idx)
{
    debugLog("croc_printval", strf2("%s %d", varNames[idx], val));
}
